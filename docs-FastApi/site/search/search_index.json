{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastAPI O que \u00e9 FastAPI? O FastAPI \u00e9 um framework Python focado no desenvolvimento de API\u2019s, tem como principais caracter\u00edsticas ser moderno, r\u00e1pido e simples. \u00c9 um framework relativamente novo, teve a sua primeira vers\u00e3o lan\u00e7ada no dia 15 de Novembro de 2018, mas n\u00e3o se engane, apesar de ser novo ele n\u00e3o \u00e9 inferior aos outros frameworks que j\u00e1 est\u00e3o no mercado h\u00e1 mais tempo, como o Django ou o Flask. Vantagens R\u00e1pido: API\u2019s desenvolvidas com o FastAPI possuem uma alta performance, ao ponto de serem comparadas com API\u2019s desenvolvidas com Node.js e Go. Inclusive \u00e9 considerado um dos frameworks Python mais r\u00e1pidos, perdendo apenas para o Starlette e o Uvicorn, que s\u00e3o frameworks utilizados internamente pelo FastAPI. Intuitivo: O c\u00f3digo fonte do framework foi inteiramente desenvolvido utilizando o recurso de type hints do Python, isso possibilita que as IDE\u2019s e Editores de C\u00f3digo Fonte possuam um melhor intellisense, fazendo assim com que se gaste menos tempo debugando o c\u00f3digo. F\u00e1cil: Foi inteiramente pensado para ser f\u00e1cil de usar e aprender, fazendo assim com que se gaste bem menos tempo lendo a documenta\u00e7\u00e3o. Robusto: O c\u00f3digo desenvolvido j\u00e1 est\u00e1 pronto para produ\u00e7\u00e3o, assim n\u00e3o precisamos fazer nenhuma altera\u00e7\u00e3o para ent\u00e3o colocar as aplica\u00e7\u00f5es desenvolvidas no ar, al\u00e9m de que o FastAPI gera a documenta\u00e7\u00e3o utilizando o Swagger e o OpenAPI de forma autom\u00e1tica. Desvantagens Compatibilidade de Bibliotecas : Pode haver menos suporte para algumas bibliotecas de terceiros ou ferramentas espec\u00edficas comparadas a frameworks mais antigos. Curva de Aprendizado para Ass\u00edncrono : O conceito de programa\u00e7\u00e3o ass\u00edncrona pode ser um desafio para desenvolvedores que n\u00e3o est\u00e3o familiarizados com asyncio e async/await.","title":"Home"},{"location":"#fastapi","text":"","title":"FastAPI"},{"location":"#o-que-e-fastapi","text":"O FastAPI \u00e9 um framework Python focado no desenvolvimento de API\u2019s, tem como principais caracter\u00edsticas ser moderno, r\u00e1pido e simples. \u00c9 um framework relativamente novo, teve a sua primeira vers\u00e3o lan\u00e7ada no dia 15 de Novembro de 2018, mas n\u00e3o se engane, apesar de ser novo ele n\u00e3o \u00e9 inferior aos outros frameworks que j\u00e1 est\u00e3o no mercado h\u00e1 mais tempo, como o Django ou o Flask.","title":"O que \u00e9 FastAPI?"},{"location":"#vantagens","text":"R\u00e1pido: API\u2019s desenvolvidas com o FastAPI possuem uma alta performance, ao ponto de serem comparadas com API\u2019s desenvolvidas com Node.js e Go. Inclusive \u00e9 considerado um dos frameworks Python mais r\u00e1pidos, perdendo apenas para o Starlette e o Uvicorn, que s\u00e3o frameworks utilizados internamente pelo FastAPI. Intuitivo: O c\u00f3digo fonte do framework foi inteiramente desenvolvido utilizando o recurso de type hints do Python, isso possibilita que as IDE\u2019s e Editores de C\u00f3digo Fonte possuam um melhor intellisense, fazendo assim com que se gaste menos tempo debugando o c\u00f3digo. F\u00e1cil: Foi inteiramente pensado para ser f\u00e1cil de usar e aprender, fazendo assim com que se gaste bem menos tempo lendo a documenta\u00e7\u00e3o. Robusto: O c\u00f3digo desenvolvido j\u00e1 est\u00e1 pronto para produ\u00e7\u00e3o, assim n\u00e3o precisamos fazer nenhuma altera\u00e7\u00e3o para ent\u00e3o colocar as aplica\u00e7\u00f5es desenvolvidas no ar, al\u00e9m de que o FastAPI gera a documenta\u00e7\u00e3o utilizando o Swagger e o OpenAPI de forma autom\u00e1tica.","title":"Vantagens"},{"location":"#desvantagens","text":"Compatibilidade de Bibliotecas : Pode haver menos suporte para algumas bibliotecas de terceiros ou ferramentas espec\u00edficas comparadas a frameworks mais antigos. Curva de Aprendizado para Ass\u00edncrono : O conceito de programa\u00e7\u00e3o ass\u00edncrona pode ser um desafio para desenvolvedores que n\u00e3o est\u00e3o familiarizados com asyncio e async/await.","title":"Desvantagens"},{"location":"execucao/","text":"execucao.md (Execu\u00e7\u00e3o) Executando a Aplica\u00e7\u00e3o Rodando o Servidor Para iniciar o servidor, use o comando: ```bash uvicorn main:app --reload","title":"Execu\u00e7\u00e3o"},{"location":"execucao/#execucaomd-execucao","text":"","title":"execucao.md (Execu\u00e7\u00e3o)"},{"location":"execucao/#executando-a-aplicacao","text":"","title":"Executando a Aplica\u00e7\u00e3o"},{"location":"execucao/#rodando-o-servidor","text":"Para iniciar o servidor, use o comando: ```bash uvicorn main:app --reload","title":"Rodando o Servidor"},{"location":"exemplos/","text":"Criar e Executar uma Aplica\u00e7\u00e3o FastAPI Agora que voc\u00ea instalou o FastAPI e o Uvicorn, vamos criar uma aplica\u00e7\u00e3o mais robusta. Esta aplica\u00e7\u00e3o incluir\u00e1 endpoints para opera\u00e7\u00f5es CRUD (Create, Read, Update, Delete) e usar\u00e1 Pydantic para valida\u00e7\u00e3o de dados. 1. Crie um arquivo main.py com o seguinte conte\u00fado: Crie um arquivo chamado main.py e adicione o seguinte conte\u00fado: from typing import List, Optional from fastapi import FastAPI, HTTPException from pydantic import BaseModel app = FastAPI() # Modelo de dados class Item(BaseModel): name: str description: Optional[str] = None price: float tax: Optional[float] = None # Simulando um banco de dados em mem\u00f3ria fake_items_db = {} @app.post(\"/items/\", response_model=Item) def create_item(item: Item): item_id = len(fake_items_db) + 1 fake_items_db[item_id] = item return item @app.get(\"/items/\", response_model=List[Item]) def read_items(): return list(fake_items_db.values()) @app.get(\"/items/{item_id}\", response_model=Item) def read_item(item_id: int): item = fake_items_db.get(item_id) if item is None: raise HTTPException(status_code=404, detail=\"Item not found\") return item @app.put(\"/items/{item_id}\", response_model=Item) def update_item(item_id: int, item: Item): if item_id not in fake_items_db: raise HTTPException(status_code=404, detail=\"Item not found\") fake_items_db[item_id] = item return item @app.delete(\"/items/{item_id}\", response_model=dict) def delete_item(item_id: int): if item_id not in fake_items_db: raise HTTPException(status_code=404, detail=\"Item not found\") del fake_items_db[item_id] return {\"message\": \"Item deleted successfully\"} 2. Executar a Aplica\u00e7\u00e3o FastAPI No terminal, navegue at\u00e9 o diret\u00f3rio onde o arquivo main.py est\u00e1 localizado e execute o seguinte comando para iniciar o servidor: uvicorn main:app --reload Isso iniciar\u00e1 o servidor Uvicorn e a aplica\u00e7\u00e3o FastAPI estar\u00e1 dispon\u00edvel em http://127.0.0.1:8000. 3. Testar a Aplica\u00e7\u00e3o Voc\u00ea pode testar a aplica\u00e7\u00e3o usando o Swagger UI e ReDoc, que s\u00e3o automaticamente gerados pelo FastAPI: Swagger UI: Acesse http://127.0.0.1:8000/docs para ver a documenta\u00e7\u00e3o interativa da API e testar os endpoints diretamente do navegador. ReDoc: Acesse http://127.0.0.1:8000/redoc para uma documenta\u00e7\u00e3o alternativa e detalhada. Exemplos de testes Criar um Item: M\u00e9todo: POST URL: http://127.0.0.1:8000/items/ Corpo da Requisi\u00e7\u00e3o: json { \"name\": \"Item1\", \"description\": \"Descri\u00e7\u00e3o do Item1\", \"price\": 25.50, \"tax\": 2.50 } Ler Itens: M\u00e9todo: GET URL: http://127.0.0.1:8000/items/ Ler um Item Espec\u00edfico: M\u00e9todo: GET URL: http://127.0.0.1:8000/items/1 Atualizar um Item: M\u00e9todo: PUT URL: http://127.0.0.1:8000/items/1 Corpo da Requisi\u00e7\u00e3o: json { \"name\": \"Item1 Atualizado\", \"description\": \"Descri\u00e7\u00e3o atualizada\", \"price\": 30.00, \"tax\": 3.00 } Excluir um Item: M\u00e9todo: DELETE URL: http://127.0.0.1:8000/items/1","title":"Exemplos"},{"location":"exemplos/#criar-e-executar-uma-aplicacao-fastapi","text":"Agora que voc\u00ea instalou o FastAPI e o Uvicorn, vamos criar uma aplica\u00e7\u00e3o mais robusta. Esta aplica\u00e7\u00e3o incluir\u00e1 endpoints para opera\u00e7\u00f5es CRUD (Create, Read, Update, Delete) e usar\u00e1 Pydantic para valida\u00e7\u00e3o de dados.","title":"Criar e Executar uma Aplica\u00e7\u00e3o FastAPI"},{"location":"exemplos/#1-crie-um-arquivo-mainpy-com-o-seguinte-conteudo","text":"Crie um arquivo chamado main.py e adicione o seguinte conte\u00fado: from typing import List, Optional from fastapi import FastAPI, HTTPException from pydantic import BaseModel app = FastAPI() # Modelo de dados class Item(BaseModel): name: str description: Optional[str] = None price: float tax: Optional[float] = None # Simulando um banco de dados em mem\u00f3ria fake_items_db = {} @app.post(\"/items/\", response_model=Item) def create_item(item: Item): item_id = len(fake_items_db) + 1 fake_items_db[item_id] = item return item @app.get(\"/items/\", response_model=List[Item]) def read_items(): return list(fake_items_db.values()) @app.get(\"/items/{item_id}\", response_model=Item) def read_item(item_id: int): item = fake_items_db.get(item_id) if item is None: raise HTTPException(status_code=404, detail=\"Item not found\") return item @app.put(\"/items/{item_id}\", response_model=Item) def update_item(item_id: int, item: Item): if item_id not in fake_items_db: raise HTTPException(status_code=404, detail=\"Item not found\") fake_items_db[item_id] = item return item @app.delete(\"/items/{item_id}\", response_model=dict) def delete_item(item_id: int): if item_id not in fake_items_db: raise HTTPException(status_code=404, detail=\"Item not found\") del fake_items_db[item_id] return {\"message\": \"Item deleted successfully\"}","title":"1. Crie um arquivo main.py com o seguinte conte\u00fado:"},{"location":"exemplos/#2-executar-a-aplicacao-fastapi","text":"No terminal, navegue at\u00e9 o diret\u00f3rio onde o arquivo main.py est\u00e1 localizado e execute o seguinte comando para iniciar o servidor: uvicorn main:app --reload Isso iniciar\u00e1 o servidor Uvicorn e a aplica\u00e7\u00e3o FastAPI estar\u00e1 dispon\u00edvel em http://127.0.0.1:8000.","title":"2. Executar a Aplica\u00e7\u00e3o FastAPI"},{"location":"exemplos/#3-testar-a-aplicacao","text":"Voc\u00ea pode testar a aplica\u00e7\u00e3o usando o Swagger UI e ReDoc, que s\u00e3o automaticamente gerados pelo FastAPI: Swagger UI: Acesse http://127.0.0.1:8000/docs para ver a documenta\u00e7\u00e3o interativa da API e testar os endpoints diretamente do navegador. ReDoc: Acesse http://127.0.0.1:8000/redoc para uma documenta\u00e7\u00e3o alternativa e detalhada.","title":"3. Testar a Aplica\u00e7\u00e3o"},{"location":"exemplos/#exemplos-de-testes","text":"Criar um Item: M\u00e9todo: POST URL: http://127.0.0.1:8000/items/ Corpo da Requisi\u00e7\u00e3o: json { \"name\": \"Item1\", \"description\": \"Descri\u00e7\u00e3o do Item1\", \"price\": 25.50, \"tax\": 2.50 } Ler Itens: M\u00e9todo: GET URL: http://127.0.0.1:8000/items/ Ler um Item Espec\u00edfico: M\u00e9todo: GET URL: http://127.0.0.1:8000/items/1 Atualizar um Item: M\u00e9todo: PUT URL: http://127.0.0.1:8000/items/1 Corpo da Requisi\u00e7\u00e3o: json { \"name\": \"Item1 Atualizado\", \"description\": \"Descri\u00e7\u00e3o atualizada\", \"price\": 30.00, \"tax\": 3.00 } Excluir um Item: M\u00e9todo: DELETE URL: http://127.0.0.1:8000/items/1","title":"Exemplos de testes"},{"location":"instalacao/","text":"Instala\u00e7\u00e3o do FastAPI e suas Depend\u00eancias (Ambiente Linux) 1. Instalar o Python Antes de instalar o FastAPI, voc\u00ea precisa ter o Python 3.7 ou superior instalado no seu sistema. Se ainda n\u00e3o o tiver, siga estas etapas: Abra o terminal. Instale o Python usando o gerenciador de pacotes da sua distribui\u00e7\u00e3o. Por exemplo, no Ubuntu, use: bash sudo apt update sudo apt install python3 python3-pip 2. Criar um Ambiente Virtual \u00c9 uma boa pr\u00e1tica usar um ambiente virtual para gerenciar depend\u00eancias de projetos Python. Isso ajuda a isolar as bibliotecas do projeto das instaladas globalmente. Crie um ambiente virtual: bash python -m venv venv Isso criar\u00e1 uma pasta chamada venv no diret\u00f3rio atual, contendo o ambiente virtual. Ative o ambiente virtual: bash source venv/bin/activate 3. Instalar o FastAPI e Uvicorn: Com o ambiente virtual ativado, instale o FastAPI e Uvicorn, que \u00e9 um servidor ASGI recomendado para executar aplica\u00e7\u00f5es FastAPI. Instale FastAPI e Uvicorn: bash pip install fastapi uvicorn - FastAPI: A framework para construir APIs. - Uvicorn: O servidor ASGI para executar a aplica\u00e7\u00e3o FastAPI.","title":"Instala\u00e7\u00e3o"},{"location":"instalacao/#instalacao-do-fastapi-e-suas-dependencias-ambiente-linux","text":"","title":"Instala\u00e7\u00e3o do FastAPI e suas Depend\u00eancias (Ambiente Linux)"},{"location":"instalacao/#1-instalar-o-python","text":"Antes de instalar o FastAPI, voc\u00ea precisa ter o Python 3.7 ou superior instalado no seu sistema. Se ainda n\u00e3o o tiver, siga estas etapas: Abra o terminal. Instale o Python usando o gerenciador de pacotes da sua distribui\u00e7\u00e3o. Por exemplo, no Ubuntu, use: bash sudo apt update sudo apt install python3 python3-pip","title":"1. Instalar o Python"},{"location":"instalacao/#2-criar-um-ambiente-virtual","text":"\u00c9 uma boa pr\u00e1tica usar um ambiente virtual para gerenciar depend\u00eancias de projetos Python. Isso ajuda a isolar as bibliotecas do projeto das instaladas globalmente. Crie um ambiente virtual: bash python -m venv venv Isso criar\u00e1 uma pasta chamada venv no diret\u00f3rio atual, contendo o ambiente virtual. Ative o ambiente virtual: bash source venv/bin/activate","title":"2. Criar um Ambiente Virtual"},{"location":"instalacao/#3-instalar-o-fastapi-e-uvicorn","text":"Com o ambiente virtual ativado, instale o FastAPI e Uvicorn, que \u00e9 um servidor ASGI recomendado para executar aplica\u00e7\u00f5es FastAPI. Instale FastAPI e Uvicorn: bash pip install fastapi uvicorn - FastAPI: A framework para construir APIs. - Uvicorn: O servidor ASGI para executar a aplica\u00e7\u00e3o FastAPI.","title":"3. Instalar o FastAPI e Uvicorn:"},{"location":"melhores_praticas/","text":"Melhores Pr\u00e1ticas e Dicas Estrutura de Projeto Organize seu projeto utilizando uma estrutura de pastas clara. Uma estrutura recomendada pode incluir: app/ : Cont\u00e9m o c\u00f3digo principal da aplica\u00e7\u00e3o. main.py : Arquivo principal onde a aplica\u00e7\u00e3o FastAPI \u00e9 criada. routers/ : Cont\u00e9m os m\u00f3dulos de roteamento. models/ : Cont\u00e9m os modelos de dados. schemas/ : Cont\u00e9m os esquemas de valida\u00e7\u00e3o (usando Pydantic). services/ : Cont\u00e9m a l\u00f3gica de neg\u00f3cios. tests/ : Cont\u00e9m os testes da aplica\u00e7\u00e3o. requirements.txt ou pyproject.toml : Gerencia as depend\u00eancias do projeto. Uso de Depend\u00eancias Utilize as depend\u00eancias do FastAPI para simplificar e organizar a l\u00f3gica comum, como autentica\u00e7\u00e3o, conex\u00e3o com banco de dados e valida\u00e7\u00e3o. Defina depend\u00eancias em fun\u00e7\u00f5es de endpoint e use o sistema de inje\u00e7\u00e3o de depend\u00eancias para manter o c\u00f3digo modular e reutiliz\u00e1vel. Tratamento de Erros Implemente tratamento de erros adequado para fornecer feedback claro e \u00fatil aos usu\u00e1rios da API. Use a exce\u00e7\u00e3o HTTPException para retornar c\u00f3digos de status HTTP apropriados e mensagens de erro. Exemplo: ```python from fastapi import FastAPI, HTTPException app = FastAPI() @app.get(\"/items/{item_id}\") def read_item(item_id: int): if item_id not in fake_items_db: raise HTTPException(status_code=404, detail=\"Item not found\") return fake_items_db[item_id]","title":"Melhores Pr\u00e1ticas e Dicas"},{"location":"melhores_praticas/#melhores-praticas-e-dicas","text":"","title":"Melhores Pr\u00e1ticas e Dicas"},{"location":"melhores_praticas/#estrutura-de-projeto","text":"Organize seu projeto utilizando uma estrutura de pastas clara. Uma estrutura recomendada pode incluir: app/ : Cont\u00e9m o c\u00f3digo principal da aplica\u00e7\u00e3o. main.py : Arquivo principal onde a aplica\u00e7\u00e3o FastAPI \u00e9 criada. routers/ : Cont\u00e9m os m\u00f3dulos de roteamento. models/ : Cont\u00e9m os modelos de dados. schemas/ : Cont\u00e9m os esquemas de valida\u00e7\u00e3o (usando Pydantic). services/ : Cont\u00e9m a l\u00f3gica de neg\u00f3cios. tests/ : Cont\u00e9m os testes da aplica\u00e7\u00e3o. requirements.txt ou pyproject.toml : Gerencia as depend\u00eancias do projeto.","title":"Estrutura de Projeto"},{"location":"melhores_praticas/#uso-de-dependencias","text":"Utilize as depend\u00eancias do FastAPI para simplificar e organizar a l\u00f3gica comum, como autentica\u00e7\u00e3o, conex\u00e3o com banco de dados e valida\u00e7\u00e3o. Defina depend\u00eancias em fun\u00e7\u00f5es de endpoint e use o sistema de inje\u00e7\u00e3o de depend\u00eancias para manter o c\u00f3digo modular e reutiliz\u00e1vel.","title":"Uso de Depend\u00eancias"},{"location":"melhores_praticas/#tratamento-de-erros","text":"Implemente tratamento de erros adequado para fornecer feedback claro e \u00fatil aos usu\u00e1rios da API. Use a exce\u00e7\u00e3o HTTPException para retornar c\u00f3digos de status HTTP apropriados e mensagens de erro. Exemplo: ```python from fastapi import FastAPI, HTTPException app = FastAPI() @app.get(\"/items/{item_id}\") def read_item(item_id: int): if item_id not in fake_items_db: raise HTTPException(status_code=404, detail=\"Item not found\") return fake_items_db[item_id]","title":"Tratamento de Erros"},{"location":"referencias/","text":"Refer\u00eancias Documenta\u00e7\u00e3o Oficial do FastAPI Pydantic - Data validation and settings management using Python type annotations Uvicorn - The lightning-fast ASGI server ASGI - Asynchronous Server Gateway Interface Swagger UI TreinaWeb - O que \u00e9 FastAPI?","title":"Refer\u00eancias"},{"location":"referencias/#referencias","text":"Documenta\u00e7\u00e3o Oficial do FastAPI Pydantic - Data validation and settings management using Python type annotations Uvicorn - The lightning-fast ASGI server ASGI - Asynchronous Server Gateway Interface Swagger UI TreinaWeb - O que \u00e9 FastAPI?","title":"Refer\u00eancias"}]}